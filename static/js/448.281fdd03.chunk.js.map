{"version":3,"file":"static/js/448.281fdd03.chunk.js","mappings":"6MAIMA,EAAe,SAACC,GAIpB,MADW,mEACDC,KAAKD,IAAyB,IAAhBA,EAAKE,MAC/B,EAEMC,EAAW,CACf,2EACA,sCACA,YACA,UACA,sBACA,kDACA,iBACA,qBACA,OACA,QACA,gCACA,UAqBIC,EAAY,SAAHC,GAAyB,IAAnBC,EAAWD,EAAXC,YAInBC,GAA0BC,EAAAA,EAAAA,UAAS,GAAEC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA9BI,EAAGF,EAAA,GAAEG,EAAUH,EAAA,GACtBI,GAAiCL,EAAAA,EAAAA,UAASL,EAASQ,IAAKG,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAjDE,EAAOD,EAAA,GAAEE,EAAaF,EAAA,GAC7BG,GAA2BT,EAAAA,EAAAA,UAAS,GAAEU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA/BE,EAAID,EAAA,GAAEE,EAAUF,EAAA,GACvBG,GAAgCb,EAAAA,EAAAA,WAAS,GAAKc,GAAAZ,EAAAA,EAAAA,GAAAW,EAAA,GAAvCE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GA0B5B,OAnDkB,SAACG,EAAUC,GAC7B,IAAMC,GAAgBC,EAAAA,EAAAA,WAEtBC,EAAAA,EAAAA,YAAU,WACRF,EAAcG,QAAUL,CAC1B,GAAG,CAACA,KAEJI,EAAAA,EAAAA,YAAU,WACR,GAAIH,EAAO,CACT,IAAMK,EAAKC,aAAY,WACrBL,EAAcG,SAChB,GAAGJ,GACH,OAAO,kBAAMO,cAAcF,EAAI,CACjC,CACA,OAAO,WAAO,CAChB,GAAG,CAACL,GACN,CAWEQ,EACE,WACE,IAAIC,EAASxB,EACTyB,EAAUjB,EACVA,EAZK,IAYUhB,EAASQ,GAAKT,SAC/BiC,GAAU,EACVC,EAAU,GAERD,IAAWhC,EAASD,OAClBI,GACFM,EAAW,GACXQ,EAAW,IAEXI,GAAY,IAGdR,EAAcb,EAASgC,GAAQE,MAAM,EAAGD,IACxCxB,EAAWuB,GACXf,EAAWgB,EAAU,GAEzB,GACAb,EA5BY,GA4BO,OAInBe,EAAAA,EAAAA,KAAA,OACEC,UAAU,mBACVC,MAAOzC,EAAagB,GAAW,CAAC,EAAI,CAAE0B,MAAO,OAC7CC,aAAc,WAAF,OAAQlB,GAAY,EAAM,EACtCmB,aAAc,WAAF,OAAQhC,EAAMR,EAASD,QAAUsB,GAAY,EAAK,EAACoB,UAE/DN,EAAAA,EAAAA,KAAA,KAAGO,KAAM9C,EAAagB,GAAS6B,UAC7BN,EAAAA,EAAAA,KAAA,QAAAM,SAAO7B,OAKf,EAEAX,EAAU0C,aAAe,CACvBxC,aAAa,GAOf,Q,UCvEA,EAtBgB,WAAH,OACXgC,EAAAA,EAAAA,KAACS,EAAAA,EAAI,CACHC,MAAM,UACNC,YAAY,sDAAqDL,UAEjEM,EAAAA,EAAAA,MAAA,WAASX,UAAU,OAAOR,GAAG,UAASa,SAAA,EACpCN,EAAAA,EAAAA,KAAA,UAAAM,UACEN,EAAAA,EAAAA,KAAA,OAAKC,UAAU,QAAOK,UACpBN,EAAAA,EAAAA,KAAA,MAAAM,UACEN,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACC,GAAG,WAAUR,SAAC,mBAI1BM,EAAAA,EAAAA,MAAA,OAAKX,UAAU,WAAUK,SAAA,EACvBM,EAAAA,EAAAA,MAAA,KAAAN,SAAA,CAAG,oDAAgDN,EAAAA,EAAAA,KAAA,KAAGO,KAAK,8BAA6BD,SAAC,6BACzFN,EAAAA,EAAAA,KAAClC,EAAS,QAEZkC,EAAAA,EAAAA,KAACe,EAAAA,EAAY,QAEV,C","sources":["components/Contact/EmailLink.js","pages/Contact.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Validates the first half of an email address.\r\nconst validateText = (text) => {\r\n  // NOTE: Passes RFC 5322 but not tested on google's standard.\r\n  // eslint-disable-next-line no-useless-escape\r\n  const re = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))$/;\r\n  return re.test(text) || text.length === 0;\r\n};\r\n\r\nconst messages = [\r\n  'you can email me literally about anything you want to talk about! Really',\r\n  'well, not anything. But most things',\r\n  'like this',\r\n  'or this',\r\n  'no bad words please',\r\n  'you can also email me with specific topics like',\r\n  'just saying hi',\r\n  'please work for us',\r\n  'help',\r\n  'admin',\r\n  'or I really like your website',\r\n  'thanks',\r\n];\r\n\r\nconst useInterval = (callback, delay) => {\r\n  const savedCallback = useRef();\r\n\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  useEffect(() => {\r\n    if (delay) {\r\n      const id = setInterval(() => {\r\n        savedCallback.current();\r\n      }, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n    return () => {}; // pass linter\r\n  }, [delay]);\r\n};\r\n\r\nconst EmailLink = ({ loopMessage }) => {\r\n  const hold = 50; // ticks to wait after message is complete before rendering next message\r\n  const delay = 50; // tick length in mS\r\n\r\n  const [idx, updateIter] = useState(0); // points to current message\r\n  const [message, updateMessage] = useState(messages[idx]);\r\n  const [char, updateChar] = useState(0); // points to current char\r\n  const [isActive, setIsActive] = useState(true); // disable when all messages are printed\r\n\r\n  useInterval(\r\n    () => {\r\n      let newIdx = idx;\r\n      let newChar = char;\r\n      if (char - hold >= messages[idx].length) {\r\n        newIdx += 1;\r\n        newChar = 0;\r\n      }\r\n      if (newIdx === messages.length) {\r\n        if (loopMessage) {\r\n          updateIter(0);\r\n          updateChar(0);\r\n        } else {\r\n          setIsActive(false);\r\n        }\r\n      } else {\r\n        updateMessage(messages[newIdx].slice(0, newChar));\r\n        updateIter(newIdx);\r\n        updateChar(newChar + 1);\r\n      }\r\n    },\r\n    isActive ? delay : null,\r\n  );\r\n\r\n  return (\r\n    <div\r\n      className=\"inline-container\"\r\n      style={validateText(message) ? {} : { color: 'red' }}\r\n      onMouseEnter={() => setIsActive(false)}\r\n      onMouseLeave={() => idx < messages.length && setIsActive(true)}\r\n    >\r\n      <a href={validateText(message)}>\r\n        <span>{message}</span>\r\n\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n\r\nEmailLink.defaultProps = {\r\n  loopMessage: false,\r\n};\r\n\r\nEmailLink.propTypes = {\r\n  loopMessage: PropTypes.bool,\r\n};\r\n\r\nexport default EmailLink;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Main from '../layouts/Main';\r\nimport EmailLink from '../components/Contact/EmailLink';\r\nimport ContactIcons from '../components/Contact/ContactIcons';\r\n\r\nconst Contact = () => (\r\n  <Main\r\n    title=\"Contact\"\r\n    description=\"Contact Abdulateef via email @ oladelemia@gmail.com\"\r\n  >\r\n    <article className=\"post\" id=\"contact\">\r\n      <header>\r\n        <div className=\"title\">\r\n          <h2>\r\n            <Link to=\"/contact\">Contact</Link>\r\n          </h2>\r\n        </div>\r\n      </header>\r\n      <div className=\"email-at\">\r\n        <p>Feel free to get in touch. You can email me at: <a href=\"mailto:oladelemia@gmail.com\">oladelemia@gmail.com</a></p>\r\n        <EmailLink />\r\n      </div>\r\n      <ContactIcons />\r\n    </article>\r\n  </Main>\r\n);\r\n\r\nexport default Contact;\r\n"],"names":["validateText","text","test","length","messages","EmailLink","_ref","loopMessage","_useState","useState","_useState2","_slicedToArray","idx","updateIter","_useState3","_useState4","message","updateMessage","_useState5","_useState6","char","updateChar","_useState7","_useState8","isActive","setIsActive","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","newIdx","newChar","slice","_jsx","className","style","color","onMouseEnter","onMouseLeave","children","href","defaultProps","Main","title","description","_jsxs","Link","to","ContactIcons"],"sourceRoot":""}